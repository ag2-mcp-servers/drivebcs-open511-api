# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T03:15:18+00:00



import argparse
import json
import os
from typing import *
from typing import Optional

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity

from models import EventType, Format, Status

app = MCPProxy(
    contact={
        'email': 'TRANBMClientRelations@gov.bc.ca',
        'name': 'Drive BC',
        'url': 'http://www.drivebc.ca/',
    },
    description="This API is DriveBC's implementation of the Open511 specification.  It provides information about known road events (traffic accidents, construction, etc.) in British Columbia, Canada.  Please note that you may experience issues when submitting requests to the delivery or test environment if using this [OpenAPI specification](https://github.com/bcgov/api-specs) in other API console viewers.",
    license={
        'name': 'Open Government License - British Columbia',
        'url': 'http://www2.gov.bc.ca/gov/content?id=A519A56BC2BF44E4A008B33FCF527F61',
    },
    termsOfService='http://www2.gov.bc.ca/gov/content?id=D1EE0A405E584363B205CD4353E02C88',
    title="DriveBC's Open511 API",
    version='1.0.0',
    servers=[
        {'url': 'http://api.open511.gov.bc.ca/'},
        {'url': 'https://api.open511.gov.bc.ca/'},
    ],
)


@app.get('/areas', tags=['geographical_info_handling'])
def get_areas(format: Optional[Format] = 'json'):
    """
    Lists the geographical areas (e.g. districts) that can be used to filter events.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/events',
    description=""" The events resource provides information about road events (e.g. accidents, construction, special events). The response is a list of event elements matching the filtering parameters if any are provided.  """,
    tags=['road_event_handling', 'geographical_info_handling'],
)
def get_events(
    format: Optional[Format] = 'json',
    status: Optional[Status] = 'ALL',
    severity: Optional[str] = 'MAJOR',
    jurisdiction: Optional[str] = 'drivebc.ca',
    event_type: Optional[EventType] = 'INCIDENT',
    created: Optional[str] = '>2015-09-01T12:00:00Z',
    updated: Optional[str] = '>2015-09-01T12:00:00Z',
    road_name: Optional[str] = 'Highway 99',
    area_id: Optional[str] = 'drivebc.ca/1',
    bbox: Optional[str] = '-130,48,-116,60',
):
    """
    Lists road events
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/jurisdiction', tags=['geographical_info_handling'])
def get_jurisdiction(format: Optional[Format] = 'json'):
    """
    Lists the jurisdictions publishing data through this Open511 API implementation
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/jurisdictiongeography', tags=['geographical_info_handling'])
def get_jurisdictiongeography(format: Optional[Format] = 'json'):
    """
    Provides the geographical boundaries for all the jurisdictions.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
